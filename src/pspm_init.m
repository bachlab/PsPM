function pspm_init
% pspm_init initializes PsPM by determining the path and loading settings
% into the main workspace
%__________________________________________________________________________
% PsPM 3.1
% (C) 2009-2015 Dominik R Bach (WTCN, UZH)
%
% PsPM 5.1.2
% Updated 2021 Teddy Chao (WCHN, UCL)

clc

% License & user output
% -------------------------------------------------------------------------
fid = fopen('pspm_msg.txt');
msg = textscan(fid, '%s', 'Delimiter', '$');
fclose(fid);
clear fid
for n = 1:numel(msg{1})
  fprintf('%s\n', msg{1}{n});
end

fprintf('PsPM: loading defaults ... \n');

% get pspm version
% -------------------------------------------------------------------------
[foo, pspm_vers] = pspm_version('check');

% check various settings
% -------------------------------------------------------------------------
global settings
p = path;
fs = filesep;

% check if subfolders are already in path
% -------------------------------------------------------------------------
% get subfolders
current_path = fileparts(mfilename('fullpath'));
folder_content = dir(current_path);
is_folder = [folder_content(:).isdir];
subfolders = {folder_content(is_folder).name}';
subfolders(ismember(subfolders, {'.','..'})) = [];

subfolders = regexprep(subfolders, '(.*)', ...
  [regexptranslate('escape', [current_path, filesep]) , '$1']);

sp = textscan(path,'%s','delimiter',pathsep);
mem = ~ismember(subfolders, sp{1});
if numel(subfolders(mem)) == 0
  % loaded subdirs which may cause trouble
  warning(['All subdirectories of the main directory are loaded into the ', ...
    'MATLAB search path. This is not necessary and may even cause ', ...
    'trouble during runtime. It is recommended to only add the path of', ...
    ' the main directory to the search path.']);
end

% -------------------------------------------------------------------------

% check Matlab version
v = version;
verr = 0;
if str2num(v(1:3)) < 7.1
  verr = 1;
  errmsg = sprintf(['You are running PsPM on a Matlab version ',...
    '(%s) under which it has not been tested.\nSPM 8 functions will ',...
    'be automatically added to you path but may not run. 1st level ',...
    'GLM may not run.\nIf you encounter any other error, ',...
    'please contact the developers.'], v);
  warning(errmsg);
end

% check toolbox functions
tboxes = ver;
signal = any(strcmp({tboxes.Name}, 'Signal Processing Toolbox'));
if ~signal
  errmsg='Signal processing toolbox not installed. Some filters might not be implemented.';
  warning(errmsg);
end

% check whether scralyze is on the path
pth = fileparts(which('pspm'));
if isempty(strfind(p, pth))
  scrpath=1;
  addpath(pth);
else
  scrpath=0;
end
pth = [pth, fs];

% check if SPM Software is on the current Path
% Dialog Window open to ask whether to remove program from the path or quit
% pspm_init. Default is to quit pspm_init
all_paths = regexpi(p,';','split');
spm_paths_idx = cell2mat(cellfun(@(x) isempty(regexpi(x,'\<spm')),all_paths,'UniformOutput',0));
all_paths_spm = all_paths(~spm_paths_idx);
pspm_paths_idx = cell2mat(cellfun(@(x) isempty(regexpi(x,'pspm')),all_paths_spm,'UniformOutput',0));
all_paths_spm = all_paths_spm(pspm_paths_idx);
if ~isempty(all_paths_spm)
  % remove the SPM from path
  if strcmp(questdlg(sprintf(['The software SPM is currently on your MATLAB search path.\n\n' ...
      'Do you want to remove the folders belonging to SPM from your MATLAB search path in order to avoid potential ' ...
      'issues with PsPM?']), ...
      'Interference with SPM software', ...
      'Yes', 'No', 'No'), 'Yes')
    cellfun(@(x) rmpath(x),all_paths_spm,'UniformOutput',0);
  else
    % quit pspm_init
    errmsg = ['Start of PsPM had to be quit, ',...
      'because of interference with the software SPM, ',...
      'which was on your MATLAB search path. ',...
      'To run PsPM be sure to remove the folders of SPM from your MATLAB search path.'];
    error(errmsg);
  end
end

% check whether SPM 8 is already on path
dummy=which('spm');
if ~isempty (dummy)
  try
    if strcmpi(spm('Ver'), 'spm8b')||strcmpi(spm('Ver'), 'spm8')
      addspm=0;
    else
      addspm=1;
    end
  catch
    addspm=1;
  end
else
  addspm=1;
end
if addspm
  addpath(pspm_path('ext','SPM'));
  spmpath=1;
else
  spmpath=0;
end

% check whether matlabbatch is already on path
dummy=which('cfg_ui');
if isempty (dummy)
  addpath(pspm_path('ext','matlabbatch'));
  matlabbatchpath=1;
else
  if strcmp(fs, '/')
    fs_regex = '/';
  else
    fs_regex = '\\';
  end
  m = regexpi(dummy, ['spm[0-9]+' fs_regex 'matlabbatch' fs_regex 'cfg_ui.m']);
  if ~isempty(m)
    if strcmp(questdlg(sprintf(['Matlabbatch from SPM and its config folder are currently on your MATLAB search path.\n\n' ...
        'Do you want to remove these folders temporarily from your MATLAB search path in order to avoid potential ' ...
        'issues with matlabbatch from PsPM?']), ...
        'Matlabbatch', ...
        'Yes', 'No', 'No'), 'Yes')

      [matlabbatch_dir,~,~] = fileparts(dummy);
      rmpath(matlabbatch_dir);
      dummy=which('spm_cfg');
      if ~isempty (dummy)
        [config_dir,~,~] = fileparts(dummy);
        rmpath(config_dir);
      end
      addpath(pspm_path('ext','matlabbatch'));
      matlabbatchpath=1;
    else
      matlabbatchpath=0;
    end
  else
    matlabbatchpath=0;
  end
end

% check whether pspm_cfg is already on path
dummy=which('pspm_cfg');
if isempty (dummy)
  addpath(pspm_path('pspm_cfg'));
  scrcfgpath=1;
else
  scrcfgpath=0;
end

% add VBA because this is used in various functions
addpath(pspm_path('ext','VBA'));
addpath(pspm_path('ext','VBA','subfunctions'));
addpath(pspm_path('ext','VBA','stats&plots'));


% -------------------------------------------------------------------------
%  allowed channel types
% -------------------------------------------------------------------------
% DEVELOPERS NOTES: in order to implement new channel types
% to defaults.import.channeltypes. If direct import is allowed, create the
% associated pspm_get_xxx import function. See first channel type (SCR) for
% explanations.
% ------------------------------------------------------------------------
% These are the allowed chantypes in a data file (checked by pspm_load_data)


defaults.chantypes(1) = ...
  struct('type', 'scr', ...     % short name for internal purposes
  'description', 'SCR', ...     % for display purposes
  'import', @pspm_get_scr, ...  % import function
  'data', 'wave');              % data type
defaults.chantypes(end+1) = ...
  struct('type', 'ecg', ...
  'description', 'ECG', ...
  'import', @pspm_get_ecg, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'hr', ...
  'description', 'Heart rate', ...
  'import', @pspm_get_hr, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'hp', ...
  'description', 'Heart period', ...
  'import', @pspm_get_hp, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'hb', ...
  'description', 'Heart beat', ...
  'import', @pspm_get_hb, ...
  'data', 'events');
defaults.chantypes(end+1) = ...
  struct('type', 'resp', ...
  'description', 'Respiration', ...
  'import', @pspm_get_resp, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'rr', ...
  'description', 'Respiration rate', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'rp', ...
  'description', 'Respiration period', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'ra', ...
  'description', 'Respiration amplitude', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'rfr', ...
  'description', 'Respiratory flow rate', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'rs', ...
  'description', 'Respiration time stamp', ...
  'import', @none, ...
  'data', 'events');
defaults.chantypes(end+1) = ...
  struct('type', 'emg', ...
  'description', 'EMG', ...
  'import', @pspm_get_emg, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'emg_pp', ...
  'description', 'EMG preprocessed', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'marker', ...
  'description', 'Marker', ...
  'import', @pspm_get_marker, ...
  'data', 'events');
defaults.chantypes(end+1) = ...
  struct('type', 'snd', ...
  'description', 'Sound channel', ...
  'import', @pspm_get_sound, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'ppu', ...
  'description', 'Pulse oxymeter', ...
  'import', @pspm_get_ppu, ...
  'data', 'wave');



% Gaze preprocessed X
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_x', ...
  'description', 'Gaze preprocessed x', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_x_c', ...
  'description', 'Gaze preprocessed x combined', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_x_l', ...
  'description', 'Gaze preprocessed x left', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_x_r', ...
  'description', 'Gaze preprocessed x right', ...
  'import', @none, ...
  'data', 'wave');
% Gaze preprocessed Y
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_y', ...
  'description', 'Gaze preprocessed y', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_y_c', ...
  'description', 'Gaze preprocessed y combined', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_y_l', ...
  'description', 'Gaze preprocessed y left', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_pp_y_r', ...
  'description', 'Gaze preprocessed y right', ...
  'import', @none, ...
  'data', 'wave');
% Gaze X
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_x', ...
  'description', 'Gaze x', ...
  'import', @pspm_get_gaze_x, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_x_c', ...
  'description', 'Gaze x combined', ...
  'import', @pspm_get_gaze_x_c, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_x_l', ...
  'description', 'Gaze x left', ...
  'import', @pspm_get_gaze_x_l, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_x_r', ...
  'description', 'Gaze x right', ...
  'import', @pspm_get_gaze_x_r, ...
  'data', 'wave');
% Gaze Y
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_y', ...
  'description', 'Gaze y', ...
  'import', @pspm_get_gaze_y, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_y_c', ...
  'description', 'Gaze y combined', ...
  'import', @pspm_get_gaze_y_c, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_y_l', ...
  'description', 'Gaze y left', ...
  'import', @pspm_get_gaze_y_l, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'gaze_y_r', ...
  'description', 'Gaze y right', ...
  'import', @pspm_get_gaze_y_r, ...
  'data', 'wave');
% Pupil
defaults.chantypes(end+1) = ...
  struct('type', 'pupil', ...
  'description', 'Pupil', ...
  'import', @pspm_get_pupil, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_c', ...
  'description', 'Pupil combined', ...
  'import', @pspm_get_pupil_c, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_l', ...
  'description', 'Pupil left', ...
  'import', @pspm_get_pupil_l, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_r', ...
  'description', 'Pupil right', ...
  'import', @pspm_get_pupil_r, ...
  'data', 'wave');
% Pupil missing
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_missing', ...
  'description', 'Pupil data missing/interpolated', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_missing_c', ...
  'description', 'Pupil data missing/interpolated combined', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_missing_l', ...
  'description', 'Pupil data missing/interpolated left', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_missing_r', ...
  'description', 'Pupil data missing/interpolated right', ...
  'import', @none, ...
  'data', 'wave');
% Pupil preprocessed
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_pp', ...
  'description', 'Pupil preprocessed', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_pp_c', ...
  'description', 'Pupil preprocessed combined', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_pp_l', ...
  'description', 'Pupil preprocessed left', ...
  'import', @none, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'pupil_pp_r', ...
  'description', 'Pupil  preprocessed right', ...
  'import', @none, ...
  'data', 'wave');



% Blink
defaults.chantypes(end+1) = ...
  struct('type', 'blink_l', ...
  'description', 'Blink left', ...
  'import', @pspm_get_blink_l, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'blink_r', ...
  'description', 'Blink right', ...
  'import', @pspm_get_blink_r, ...
  'data', 'wave');

% Saccade
defaults.chantypes(end+1) = ...
  struct('type', 'saccade_l', ...
  'description', 'Saccade left', ...
  'import', @pspm_get_saccade_l, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'saccade_r', ...
  'description', 'Saccade right', ...
  'import', @pspm_get_saccade_r, ...
  'data', 'wave');

% Scanpath
defaults.chantypes(end+1) = ...
  struct('type', 'sps', ...
  'description', 'Scanpath speed', ...
  'import', @pspm_get_sps, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'sps_l', ...
  'description', 'Scanpath speed', ...
  'import', @pspm_get_sps_l, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'sps_r', ...
  'description', 'Scanpath speed', ...
  'import', @pspm_get_sps_r, ...
  'data', 'wave');
defaults.chantypes(end+1) = ...
  struct('type', 'sps_c', ...
  'description', 'Scanpath speed from combined gaze channels', ...
  'import', @none, ...
  'data', 'wave');

defaults.chantypes(end+1) = ...
  struct('type', 'custom', ...
  'description', 'Custom', ...
  'import', @pspm_get_custom, ...
  'data', 'wave');



defaults.findvalidfixations.chantypes = {...
  'gaze_pp_x', ...
  'gaze_pp_y', ...
  'gaze_x', ...
  'gaze_y', ...
  'pupil', ...
  'pupil_missing', ...
  'pupil_pp'}; % alphabetical order

for k = 1:numel(defaults.chantypes)
  if strcmpi(func2str(defaults.chantypes(k).import), 'none')
    indx(k) = 0;
  else
    indx(k) = 1;
  end
end

defaults.importchantypes = defaults.chantypes(indx==1);

% -------------------------------------------------------------------------
%  general import settings
% -------------------------------------------------------------------------
% DEVELOPERS NOTES: in order to implement new datatype import, add a field
% to defaults.import.datatypes and create the associated pspm_get_xxx
% function. See first datatype (CED spike) for explanations.
% -------------------------------------------------------------------------

% Cambridge Electronic Design (CED) Spike files
% ---------------------------------------------
defaults.import.datatypes(1) = ...
  struct('short', 'spike', ...  % short name for internal purposes
  'long', 'CED Spike (.smr)', ...      % long name for GUI
  'ext', 'smr', ...             % data file extension
  'funct', @pspm_get_spike, ...  % import function
  'chantypes', {{defaults.importchantypes.type}}, ...  % allowed channel types
  'chandescription', 'channel', ... % description of channels for GUI
  'multioption', 1, ...         % allow import of multiple channels for GUI
  'searchoption', 1, ...        % allow channel name search for GUI
  'automarker', 0, ...          % marker not stored in separate channel
  'autosr', 1, ...              % sample rate automatically assigned
  'help', '');                  % helptext from structure gui

% Matlab files
% ------------
defaults.import.datatypes(2) = ...
  struct('short', 'mat', ...
  'long', 'Matlab', ...
  'ext', 'mat', ...
  'funct', @pspm_get_mat, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'cell/column', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 0, ...
  'autosr', 0, ...
  'help', ['Each input file must contain a variable called data that is ', ...
  'either a cell array of column vectors, or a data points � channels ', ...
  'matrix. The import of event markers is supported. Marker channels ', ...
  'are assumed to be continuous if the input data is a matrix or if ', ...
  'the input data is a cell and the given samplerate is larger than ', ...
  '1 Hz. A sample rate has to be specified for any type of data.']);

% Text files
% ----------
defaults.import.datatypes(3) = ...
  struct('short', 'txt', ...
  'long', 'Text', ...
  'ext', 'txt', ...
  'funct', @pspm_get_txt, ...
  'chantypes', {{defaults.importchantypes(strcmpi('wave',{defaults.importchantypes.data}) |  ...
  strcmpi('marker', {defaults.importchantypes.type})).type}}, ...  %all wave channels + marker
  'chandescription', 'column', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 0, ...
  'autosr', 0, ...
  'help', ['Text files can only contain numbers ', ...
  '(i.e. no header lines with channel names) and one data column per ', ...
  'channel. Make sure you use the decimal point (i.e. not decimal ', ...
  'comma as used in some non-English speaking countries). At the moment, ', ...
  'no import of event markers is possible']);

% Delimiter Separated files
% ----------
defaults.import.datatypes(4) = ...
  struct('short', 'dsv', ...
  'long', 'Delimiter Separated Values', ...
  'ext', 'any', ...
  'funct', @pspm_get_txt, ...
  'chantypes', {{defaults.importchantypes(strcmpi('wave',{defaults.importchantypes.data}) |  ...
  strcmpi('marker', {defaults.importchantypes.type})).type}}, ...  %all wave channels + marker
  'chandescription', 'column', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 0, ...
  'autosr', 0, ...
  'help', ['Reads a file using a custom delimiter, for example',...
  'a delimiter or a comma (,) would read the same as a csv']);

% CSV - copy of dsv with partially applied delimiter
defaults.import.datatypes(5) = ...
  struct('short', 'csv', ...
  'long', 'Comma Separated Values', ...
  'ext', 'csv', ...
  'funct',  @pspm_get_csv, ...
  'chantypes', {{defaults.importchantypes(strcmpi('wave',{defaults.importchantypes.data}) |  ...
  strcmpi('marker', {defaults.importchantypes.type})).type}}, ...  %all wave channels + marker
  'chandescription', 'column', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 0, ...
  'autosr', 0, ...
  'help', 'Read using comma as a delimiter');



% Biopac Acknowledge up to version 3.9.0
% --------------------------------------
defaults.import.datatypes(6) = ...
  struct('short', 'acq', ...
  'long', 'Biopac Acqknowledge 3.9.0 or lower (.acq)', ...
  'ext', 'acq', ...
  'funct', @pspm_get_acq, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', '');

% exported Biopac Acqknowledge (tested on version 4.2.0)
% -----------------------------------------------------
defaults.import.datatypes(7) = ...
  struct('short', 'acqmat', ...
  'long', 'matlab-exported Biopac Acqknowledge 4.0 or higher', ...
  'ext', 'mat', ...
  'funct', @pspm_get_acqmat, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', '');

% bioread converted Biopac Acqknowledge (any version)
% -----------------------------------------------------
defaults.import.datatypes(8) = ...
  struct('short', 'acq_bioread', ...
  'long', 'bioread-converted Biopac Acqknowledge (any version)', ...
  'ext', 'mat', ...
  'funct', @pspm_get_acq_bioread, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', ['Loads mat files which have been converted using the ', ...
  'bioread tool acq2mat. Bioread can be installed using pip ', ...
  '(installed by python) or can be downloaded and installed ', ...
  'manually from here https://github.com/njvack/bioread. It ', ...
  'requires python and the python libraries numpy and scipy.']);

% ADInstruments Labchart  (any Version)
% -----------------------------------------------------
defaults.import.datatypes(9) = ...
  struct('short', 'labchartmat', ...
  'long', 'ADInstruments LabChart (any Version, Windows only)', ...
  'ext', 'adicht', ...
  'funct', @pspm_get_labchart, ...
  'chantypes', {{defaults.importchantypes(~strcmpi('hb',{defaults.importchantypes.type})).type}}, ...  %all except hb
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', ['Supports the import of any original Labchart (.adicht) file. ', ...
  'Since it uses an external library, this import is restricted to Windows ', ...
  'systems only and does not work on any other operating system.']);

% exported ADInstruments Labchart up to 7.1
% -----------------------------------------------------
defaults.import.datatypes(10) = ...
  struct('short', 'labchartmat_ext', ...
  'long', 'matlab-exported ADInstruments LabChart 7.1 or lower', ...
  'ext', 'mat', ...
  'funct', @pspm_get_labchartmat_ext, ...
  'chantypes', {{defaults.importchantypes(~strcmpi('hb',{defaults.importchantypes.type})).type}}, ...  %all except hb
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', ['Export data to matlab format (plugin for the LabChart ', ...
  'software, available from www.adinstruments.com)']);

% exported ADInstruments Labchart 7.2 or higher
% -----------------------------------------------------
defaults.import.datatypes(11) = ...
  struct('short', 'labchartmat_in', ...
  'long', 'matlab-exported ADInstruments LabChart 7.2 or higher', ...
  'ext', 'mat', ...
  'funct', @pspm_get_labchartmat_in, ...
  'chantypes', {{defaults.importchantypes(~strcmpi('hb',{defaults.importchantypes.type})).type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', '');

% VarioPort
% -----------------------------------------------------
defaults.import.datatypes(12) = ...
  struct('short', 'vario', ...
  'long', 'VarioPort (.vdp)', ...
  'ext', 'vpd', ...
  'funct', @pspm_get_vario, ...
  'chantypes', {{defaults.importchantypes(~strcmpi('hb',{defaults.importchantypes.type})).type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', '');

% exported Biograph Infiniti
% -----------------------------------------------------
defaults.import.datatypes(13) = ...
  struct('short', 'biograph', ...
  'long', 'text-exported Biograph Infiniti', ...
  'ext', 'txt', ...
  'funct', @pspm_get_biograph, ...
  'chantypes', {{'scr', 'hb', 'resp'}}, ...
  'chandescription', 'channel', ...
  'multioption', 0, ...
  'searchoption', 0, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', ['Export data to text format, both "Export Channel Data" and ', ...
  '"Export Interval Data" are supported; a header is required']);

% exported MindMedia Biotrace
% -----------------------------------------------------
defaults.import.datatypes(14) = ...
  struct('short', 'biotrace', ...
  'long', 'text-exported MindMedia Biotrace', ...
  'ext', 'txt', ...
  'funct', @pspm_get_biotrace, ...
  'chantypes', {{defaults.importchantypes(~strcmpi('hb',{defaults.importchantypes.type})).type}}, ...
  'chandescription', 'channel', ...
  'multioption', 0, ...
  'searchoption', 0, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', '');

% Brain Vision
% -----------------------------------------------------
defaults.import.datatypes(15) = ...
  struct('short', 'brainvision', ...
  'long', 'BrainVision (.eeg)', ...
  'ext', 'eeg', ...
  'funct', @pspm_get_brainvis, ...
  'chantypes', {{defaults.chantypes(~strcmpi('hb',{defaults.chantypes.type})).type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', '');

% Dataq Windaq (e. g. provided by Coulbourn Instruments)
% -----------------------------------------------------
defaults.import.datatypes(16) = ...
  struct('short', 'windaq', ...
  'long', 'DATAQ Windaq (.wdq) (read with ActiveX-Lib)', ...
  'ext', 'wdq', ...
  'funct', @pspm_get_wdq, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', ['Requires an ActiveX Plugin provided by the manufacturer ', ...
  'and contained in the subfolder Import/wdq for your convenience. ', ...
  'This plugin only runs under 32 bit Matlab on Windows. ']);

% Dataq Windaq (PsPM Version)
% -----------------------------------------------------
defaults.import.datatypes(17) = ...
  struct('short', 'windaq_n', ...
  'long', 'DATAQ Windaq (.wdq)', ...
  'ext', 'wdq', ...
  'funct', @pspm_get_wdq_n, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', ['Windaq import written by the PsPM team. It is platform ', ...
  'independent, thus has no requirements for ActiveX Plugins, Windows ', ...
  'or 32bit Matlab. Imports the original acquisition files files. ', ...
  'Up to now the import has been tested with files of the following ', ...
  'type: Unpacked, no Hi-Res data, no Multiplexer files. ', ...
  'A warning will be produced if the imported data-type fits one of the ', ...
  'yet untested cases. If this is the case try to use the import provided ', ...
  'by the manufacturer (see above).']);

% Noldus Observer XT compatible .txt files
% -----------------------------------------------------
defaults.import.datatypes(18) = ...
  struct('short', 'observer', ...
  'long', 'Noldus Observer XT compatible text file', ...
  'ext', 'any', ...
  'funct', @pspm_get_obs, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', '');

% NeuroScan
% -----------------------------------------------------
defaults.import.datatypes(19) = ...
  struct('short', 'cnt', ...
  'long', 'Neuroscan (.cnt)', ...
  'ext', 'cnt', ...
  'funct', @pspm_get_cnt, ...
  'chantypes', {{defaults.importchantypes(~strcmpi('hb',{defaults.importchantypes.type})).type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', '');

% BioSemi
% -----------------------------------------------------
defaults.import.datatypes(20) = ...
  struct('short', 'biosemi', ...
  'long', 'BioSemi (.bdf)', ...
  'ext', 'bdf', ...
  'funct', @pspm_get_biosemi, ...
  'chantypes', {{defaults.importchantypes(~strcmpi('hb',{defaults.importchantypes.type})).type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', '');

% Eyelink 1000 files
% ---------------------------------------------
defaults.import.datatypes(21) = ...
  struct('short', 'eyelink', ...
  'long', 'Eyelink 1000 (.asc)', ...
  'ext', 'asc', ...
  'funct', @pspm_get_eyelink, ...
  'chantypes', {{'pupil_l','pupil_r', 'gaze_x_l', 'gaze_y_l', ...
  'gaze_x_r', 'gaze_y_r', 'blink_l', 'blink_r', ...
  'saccade_l', 'saccade_r', 'marker', 'custom'}}, ...
  'chandescription', 'data column', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', ['Eyelink output files (with extension *.edf) must first be ', ...
  'converted to ASCII format (extension *.asc). This is done with the ', ...
  'utility edf2asc.exe (normally included in the Eyelink software in ', ...
  '<Path to Program Files>\SR Research\EyeLink\EDF_Access_API\). ', ...
  'Otherwise there is a Data viewer, available at ', ...
  'http://www.sr-research.com/dv.html (registration needed), which ', ...
  'installs a utility called ''Visual EDF2ASC''. This also allows the', ...
  'conversion and does not require a license. The composition of ', ...
  'channels depends on the acquisition settings. Available channels are ', ...
  'Pupil L, Pupil R, x L, y L, x R, y R, Blink L, Blink R, Saccade L,',...
  'Saccade R. The channels will be imported ', ...
  'according to a known data structure, therefore channel ids passed to ', ...
  'the import function or set in the Batch will be ignored. In the PsPM ', ...
  'file channels, which were not available in the data file, will be ', ...
  'padded with NaN values. Additionally periods of blinks and saccades ', ...
  'will be set to NaN during the import.']);

% European Data Format (EDF)
% -----------------------------------------------------
defaults.import.datatypes(22) = ...
  struct('short', 'edf', ...
  'long', 'European Data Format (.edf)', ...
  'ext', 'edf', ...
  'funct', @pspm_get_edf, ...
  'chantypes', {{defaults.importchantypes.type}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 1, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', '');

% Philips Scanphyslog (.log)
% -----------------------------------------------------
defaults.import.datatypes(23) = ...
  struct('short', 'physlog', ...
  'long', 'Philips Scanphyslog (.log)', ...
  'ext', 'log', ...
  'funct', @pspm_get_physlog, ...
  'chantypes', {{'ecg', 'ppu', 'resp', 'custom', 'marker'}}, ...
  'chandescription', 'channel', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 0, ...
  'autosr', 1, ...
  'help', ['The physlog ascii file contains 6 channels with ', ...
  'physiological measurements (Channel id 1-6): ECG1, ECG2, ECG3, ', ...
  'ECG4, Pulse oxymeter, Respiration. ', ...
  'Depending on your scanner settings, there are 10 trigger channels ', ...
  'of which channel 6 marks time t of the last slice recording. ', ...
  'After importing, a time window from t minus ', ...
  '(#volumes )*(repetition time) seconds until t should be used for ', ...
  'trimming or splitting of sessions to constrain data in the ', ...
  'imported file to the EPI recording window and easier matching ', ...
  'with experimental events from a separate source. Available ', ...
  'trigger channels are (Channel id 1-10): Trigger ECG, Trigger PPU, ', ...
  'Trigger Respiration, Measurement (?slice onset?), Start of scan ', ...
  'sequence, End of scan sequence, Trigger external, Calibration, ', ...
  'Manual start, Reference ECG Trigger.']);

% ViewPoint EyeTracker files
% ---------------------------------------------
defaults.import.datatypes(24) = ...
  struct('short', 'viewpoint', ...
  'long', 'ViewPoint EyeTracker (.txt)', ...
  'ext', 'txt', ...
  'funct', @pspm_get_viewpoint, ...
  'chantypes', {{'pupil_l','pupil_r', 'gaze_x_l', 'gaze_y_l', ...
  'gaze_x_r', 'gaze_y_r', 'blink_l', 'blink_r', 'saccade_l', 'saccade_r', ...
  'marker', 'custom'}}, ...
  'chandescription', 'data column', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', 'See pspm_get_viewpoint documentation');

% SMI EyeTracker files
% ---------------------------------------------
defaults.import.datatypes(25) = ...
  struct('short', 'smi', ...
  'long', 'SensoMotoric Instruments iView X EyeTracker (.txt)', ...
  'ext', 'txt', ...
  'funct', @pspm_get_smi, ...
  'chantypes', {{'pupil_l', 'pupil_r', 'gaze_x_l', 'gaze_y_l', ...
  'gaze_x_r', 'gaze_y_r', 'blink_l', 'blink_r', 'saccade_l', 'saccade_r', ...
  'marker', 'custom'}}, ...
  'chandescription', 'data column', ...
  'multioption', 1, ...
  'searchoption', 0, ...
  'automarker', 1, ...
  'autosr', 1, ...
  'help', 'See pspm_get_smi documentation');

%
% Default channel name for channel type search
% --------------------------------------------
defaults.import.channames.scr       = {'scr', 'scl', 'gsr', 'eda'};
defaults.import.channames.hr        = {'rate', 'hr'};
defaults.import.channames.hb        = {'beat', 'hb'};
defaults.import.channames.ecg       = {'ecg', 'ekg'};
defaults.import.channames.hp        = {'hp'};
defaults.import.channames.resp      = {'resp', 'breath'};
defaults.import.channames.pupil     = {'pupil', 'eye', 'track'};
defaults.import.channames.marker    = {'trig', 'mark', 'event', 'scanner'};
defaults.import.channames.sound     = {'sound'};
defaults.import.channames.custom    = {'custom'};

% Various import settings
% ----------------------
defaults.import.fileprefix = 'pspm_';

defaults.import.rsr = 1000;                % minimum resampling rate for pulse data import
defaults.import.sr = 100;                  % final sampling rate for pulse data import

defaults.import.mat.sr_threshold = 1; %maximum value of the field '.sr' to which data is recognized as timestamps

% Preprocessing settings
% ----------------------
defaults.split.max_sn = 10; % split sessions: assume maximum 10 sessions
defaults.split.min_break_ratio = 3; % split sessions: assume inter marker intervals 3 times longer for breaks

% Lateral setting
defaults.lateral.char.b = 'c';
defaults.lateral.char.l = 'l';
defaults.lateral.char.r = 'r';

defaults.lateral.cap.b = 'C';
defaults.lateral.cap.l = 'L';
defaults.lateral.cap.r = 'R';

defaults.lateral.full.b = 'combined';
defaults.lateral.full.l = 'left';
defaults.lateral.full.r = 'right';

% other settings
% -------------------------------------------------------------------------
defaults.get_transfer_sr=100;            % resampling rate for automatic transfer function computation

% default modalities
% -------------------------------------------------------------------------
defaults.modalities = struct('glm', 'scr', ...
  'sf', 'scr', ...
  'dcm', 'scr', ...
  'pfm', 'pupil');

% -------------------------------------------------------------------------
%  modality-specific GLM settings
% -------------------------------------------------------------------------
% DEVELOPERS NOTES: in order to implement new modalities, add a field
% to defaults.glm. See first modality (SCR) for explanations.
% -------------------------------------------------------------------------

defaults.glm(1) = ...                                              % GLM for SCR
  struct('modality', 'scr', ...                                  % modality name
  'modelspec', 'scr', ...                                        % model specification
  'cbf', struct('fhandle', @pspm_bf_scrf, 'args', 1), ...  % default basis function/set
  'filter', struct('lpfreq', 5, 'lporder', 1,  ...        % default filter settings
  'hpfreq', 0.05, 'hporder', 1, 'down', 10, ...
  'direction', 'uni'), ...
  'default', 1);

defaults.glm(2) = ... % GLM for HP (evoked)
  struct('modality', 'hp', ...
  'modelspec', 'hp_e', ...
  'cbf', struct('fhandle', @pspm_bf_hprf_e, 'args', 1), ...
  'filter', struct('lpfreq', 2, 'lporder', 2,  ...
  'hpfreq', 0.01, 'hporder', 2, 'down', 10, ...
  'direction', 'uni'), ...
  'default', 0);

defaults.glm(3) = ... % GLM for HP (fear-conditioning)
  struct('modality', 'hp', ...
  'modelspec', 'hp_fc', ...
  'cbf', struct('fhandle', @pspm_bf_hprf_fc, 'args', 1), ...
  'filter', struct('lpfreq', 0.5, 'lporder', 4,  ...
  'hpfreq', 0.015, 'hporder', 4, 'down', 10, ...
  'direction', 'bi'), ...
  'default', 0);

defaults.glm(4) = ... % GLM for PS (fear-conditioning)
  struct('modality', 'pupil', ...
  'modelspec', 'ps_fc', ...
  'cbf', struct('fhandle', @pspm_bf_psrf_fc, 'args', 1), ...
  'filter', struct('lpfreq', 50, 'lporder', 1, ...
  'hpfreq', NaN, 'hporder', NaN, 'down', 100, ...
  'direction', 'bi'), ...
  'default', 0);

defaults.glm(5) = ... % GLM for RA (evoked)
  struct('modality', 'ra', ...
  'modelspec', 'ra_e', ...
  'cbf', struct('fhandle', @pspm_bf_rarf_e, 'args', 1), ...
  'filter', struct('lpfreq', 1, 'lporder', 1,  ...
  'hpfreq', 0.001, 'hporder', 1, 'down', 10, ...
  'direction', 'uni'), ...
  'default', 0);

defaults.glm(6) = ... % GLM for RA (fear-conditioning)
  struct('modality', 'ra', ...
  'modelspec', 'ra_fc', ...
  'cbf', struct('fhandle', @pspm_bf_rarf_fc, 'args', 1), ...
  'filter', struct('lpfreq', 2, 'lporder', 6,  ...
  'hpfreq', 0.01, 'hporder', 6, 'down', 10, ...
  'direction', 'bi'), ...
  'default', 0);

defaults.glm(7) = ... % GLM for RP (evoked)
  struct('modality', 'rp', ...
  'modelspec', 'rp_e', ...
  'cbf', struct('fhandle', @pspm_bf_rprf_e, 'args', 0), ...
  'filter', struct('lpfreq', 1, 'lporder', 1,  ...
  'hpfreq', 0.01, 'hporder', 1, 'down', 10, ...
  'direction', 'uni'), ...
  'default', 0);

defaults.glm(8) = ... % GLM for RFR (evoked)
  struct('modality', 'rfr', ...
  'modelspec', 'rfr_e', ...
  'cbf', struct('fhandle', @pspm_bf_rfrrf_e, 'args', 1), ...
  'filter', struct('lpfreq', 1, 'lporder', 1,  ...
  'hpfreq', 0.001, 'hporder', 1, 'down', 10, ...
  'direction', 'uni'), ...
  'default', 0);

defaults.glm(9) = ... % GLM for SEBR (fear-conditioning)
  struct('modality', 'emg_pp', ...                               % modality name
  'modelspec', 'sebr', ...                                  % modality name
  'cbf', struct('fhandle', @pspm_bf_sebrf, 'args', 0), ...  % default basis function/set
  'filter', struct('lpfreq', NaN, 'lporder', NaN,  ...        % default filter settings
  'hpfreq', NaN, 'hporder', NaN, 'down', 1000, ...
  'direction', 'uni'), ...
  'default', 1);

defaults.glm(10) = ... % GLM for Scanpath-speed
  struct('modality', 'sps', ...                               % modality name
  'modelspec', 'sps', ...                                  % modality name
  'cbf', struct('fhandle', @pspm_bf_spsrf_box, 'args', 1), ...  % default basis function/set
  'filter', struct('lpfreq', NaN, 'lporder', NaN,  ...        % default filter settings
  'hpfreq', NaN, 'hporder', NaN, 'down', 1000, ...
  'direction', 'uni'), ...
  'default', 1);

% -------------------------------------------------------------------------
%  DCM settings
% -------------------------------------------------------------------------
% DEVELOPERS NOTES: currently this is being used for DCM for SCR, and for
% SF analysis. Further modalities and models can be implemented.
% -------------------------------------------------------------------------
defaults.dcm{1} = ...
  struct('filter', struct('lpfreq', 5, 'lporder', 1,  ...        % DCM for SCR filter settings
  'hpfreq', 0.0159, 'hporder', 1, 'down', 10, ...
  'direction', 'bi'), ...
  'sigma_offset', 0.3);

defaults.dcm{2} = ...
  struct('filter', struct('lpfreq', 5, 'lporder', 1,  ...        % DCM for SF filter settings
  'hpfreq', 0.0159, 'hporder', 1, 'down', 10, ...
  'direction', 'uni'));


% -------------------------------------------------------------------------
%  PFM settings
% -------------------------------------------------------------------------
% DEVELOPERS NOTES: currently this is being used for PFM for pupil data.
% Further modalities and models can be implemented.
% -------------------------------------------------------------------------
defaults.pfm(1) = struct( ...
  'modality', 'dilation', ...                                                       % modality name
  'cbf', struct('fhandle', @pspm_bf_ldrf_gm, 'args', [0.2, 2.40 , 0.29 , 0.77]), ...  % basis function & default parameters
  'cif', struct('fhandle', @pspm_bf_ldrf_gm, 'args', [0, 2.76 , 0.09 , 0.31], ...     % input function & default parameters
  'lb', [0,0,0,0], 'ub', [0,Inf,Inf,Inf]), ...                          % & the lower/upper bounds
  'filter', struct('lpfreq', 'none', 'lporder', 0,  ...                               % default filter
  'hpfreq', 'none', 'hporder', 0, 'down', 0, 'direction', 'bi'));

defaults.pfm(2) = struct( ...
  'modality', 'constriction', ...
  'cbf', struct('fhandle', @pspm_bf_lcrf_gm, 'args', [0.2, 3.24 , 0.18 , 0.43]), ...
  'cif', struct('fhandle', @pspm_bf_lcrf_gm, 'args', [0, 2.76 , 0.09 , 0.31], ...
  'lb', [0,0,0,0], 'ub', [0,Inf,Inf,Inf]), ...
  'filter', struct('lpfreq', 'none', 'lporder', 0,  ...
  'hpfreq', 'none', 'hporder', 0, 'down', 0, 'direction', 'bi'));


% -------------------------------------------------------------------------
%  FIRST LEVEL settings
% -------------------------------------------------------------------------
defaults.first = {'glm', 'sf', 'dcm', 'pfm'}; % allowed first level model types

% -------------------------------------------------------------------------
% Data/module file helptext settings
% -------------------------------------------------------------------------

defaults.datafilehelp = ['In case data/model file(s) are chosen via the ',...
  'dependency button, make sure the number of output ',...
  'files of the preceding module corresponds with the ',...
  'allowed number of input files for this module.'];

%% UI parameters
% Parameters for UI optimisation
if ispc
  defaults.ui = struct('OperatingSystem','Windows',...
    'DisplayUnit', 'points',...
    'SwitchResize', 'off',...
    'MainWeight', 500,...
    'MainHeight', 500*0.8,...
    'DisplayWeight', 250,...
    'DisplayHeight', 250/5,...
    'FontSizeTitle', 11,...
    'FontSizeText', 10,...
    'FontSizeCaption', 9,...
    'FontSizeAttr', 9,...
    'FontNameText', 'Segoe UI',...
    'FontNameEmph', 'Segoe UI Bold');
elseif ismac
  defaults.ui = struct('OperatingSystem','Mac',...
    'DisplayUnit', 'points',...
    'SwitchResize', 'off',...
    'MainWeight', 750,...
    'MainHeight', 750*0.8,...
    'DisplayWeight', 190,...
    'DisplayHeight', 60, ...
    'FontSizeTitle', 16,...
    'FontSizeText', 14,...
    'FontSizeCaption', 12,...
    'FontSizeAttr', 13,...
    'FontNameText', 'Helvetica Neue',...
    'FontNameEmph', 'Gill Sans');
else
  defaults.ui = struct('OperatingSystem','Linux',...
    'DisplayUnit', 'points',...
    'SwitchResize', 'on',...
    'MainWeight', 650,...
    'MainHeight', 650*0.8,...
    'DisplayWeight', 190,...
    'DisplayHeight', 60,...
    'FontSizeTitle', 11,...
    'FontSizeText', 10,...
    'FontSizeCaption', 9,...
    'FontSizeAttr', 10,...
    'FontNameText', 'Verdana',...
    'FontNameEmph', 'Verdana Bold');
end

defaults.developmode=1;
defaults.path=pth;
defaults.scrpath=scrpath;
defaults.spmpath=spmpath;
defaults.matlabbatchpath=matlabbatchpath;
defaults.scrcfgpath=scrcfgpath;
defaults.signal = signal;
defaults.pspm_version = pspm_vers;

% -------------------------------------------------------------------------
% look for settings, otherwise set defaults
% -------------------------------------------------------------------------
if exist([pth, 'pspm_settings_custom.mat'], 'file')
  load([pth, 'pspm_settings_custom.mat']);
else
  settings = defaults;
end

save([pth, 'pspm_settings.mat'], "settings", '-mat');


return;